---
- name: Deploy Docker containerized Node.js/React application
  hosts: webservers
  become: true # This enables sudo privileges for all tasks in this play
  vars_files:
    - ../../config/ec2_config.yml
    - ../group_vars/all.yml

  tasks:
    - name: Check distribution
      debug:
        msg: "Operating System: \n
              Distribution: {{ ansible_distribution }} \n
              OS family: ({{ ansible_os_family }})"

    - name: Gather EC2 instance information
      become: false  # Override become at task level (so this is run as the user, not root)
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        instance_ids:
          - "{{ instance_id }}"
      register: ec2_info
    - name: Debug the instance information
      debug:
        msg: "Instance details: {{ ec2_info }}"

    - name: Debug the public IP
      become: false  # Override become at task level (so this is run as the user, not root)
      debug:
        msg: "Public IP: {{ ec2_info.instances[0].public_ip_address }}"
      register: ec2_info
      when: ec2_info.instances | length > 0

    - name: Install packages on RedHat
      yum:
        name: 
          - yum-utils
          - docker
          - python3-pip
          - git
        state: present
      when: ansible_os_family == "RedHat"
    
    - name: Install packages on Debian
      apt:
        name: 
          - docker
          - python3-pip
          - git
        state: present
      when: ansible_os_family == "Debian"

    - name: Check Docker Version
      shell: "docker --version"
      register: docker_version_output
      changed_when: false
      failed_when: docker_version_output.rc > 1

    - name: Print Docker version if installed
      debug:
        msg: "Docker is installed. Version: {{ docker_version_output.stdout }}"
      when: docker_version_output.rc == 0

    - name: Print message if Docker is not installed
      debug:
        msg: "Docker is not installed."
      when: docker_version_output.rc != 0

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes
      register: docker_service
    - name: Show Docker service status
      debug:
        msg: >
          Docker service status:
          Running: {{ docker_service.status.ActiveState == 'active' }}
          Enabled: {{ docker_service.status.UnitFileState == 'enabled' }}
      when: docker_service is defined

    - name: List Docker images
      command: docker images
      register: docker_images
      changed_when: false  # This command doesn't modify the system
    - name: Show Docker images
      debug:
        msg: "{{ docker_images.stdout_lines }}"

    - name: List Docker containers
      command: docker ps -a
      register: docker_containers
      changed_when: false  # This command doesn't modify the system
    - name: Show Docker containers
      debug:
        msg: "{{ docker_containers.stdout_lines }}"
    - name: List Docker port mappings
      shell: 'docker ps --format "table {% raw %}{{.Names}}{% endraw %}\t{% raw %}{{.Ports}}{% endraw %}"'
      register: docker_ports
      changed_when: false

    - name: Show port mappings
      debug:
        msg: "Container port mappings:\n{{ docker_ports.stdout_lines | join('\n') }}"

    - name: Remove old container and image
      block:
        - name: Check if container exists
          command: docker ps -a --format '{% raw %}{{.Names}}{% endraw %}'
          register: existing_containers
          changed_when: false

        - name: Stop running container
          docker_container:
            name: "{{ container_name }}"
            state: stopped
          when: container_name in existing_containers.stdout_lines
          ignore_errors: true

        - name: Remove container
          docker_container:
            name: "{{ container_name }}"
            state: absent
          ignore_errors: true

        - name: Check if image exists
          command: "docker images {{ docker_image_name }}:{{ image_tag | default('latest') }} --format '{% raw %}{{.Repository}}:{{.Tag}}{% endraw %}'"
          register: existing_images
          changed_when: false

        - name: Remove Docker image
          docker_image:
            name: "{{ docker_image_name }}"
            tag: "{{ image_tag | default('latest') }}"
            state: absent
            force_absent: yes
          when: existing_images.stdout_lines | length > 0
          ignore_errors: true

    - name: Verify removal
      block:
        - name: Check containers
          command: docker ps -a
          register: containers
          changed_when: false

        - name: Check images
          command: docker images
          register: images
          changed_when: false

        - name: Show results
          debug:
            msg: |
              Remaining containers:
              {{ containers.stdout_lines }}
              
              Remaining images:
              {{ images.stdout_lines }}
