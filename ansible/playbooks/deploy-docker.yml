---
- name: Deploy Docker containerized Node.js/React application
  hosts: webservers
  become: yes
  vars_files:
    - ../group_vars/all.yml

  tasks:
    - name: Gather EC2 instance information
      amazon.aws.ec2_instance_info:
        region: "{{ eu-central-1 }}"  # Replace with your AWS region
        instance_ids:
          - "{{ i-0422fd48e0ebf0635 }}"
      register: ec2_info
    - name: Debug the instance information
      debug:
        msg: "Instance details: {{ ec2_info }}"

    - name: Debug the public IP
      debug:
        msg: "Public IP: {{ ec2_info.instances[0].public_ip_address }}"
      register: ec2_info
    - name: Install required packages
      yum:
        name: 
          - docker
          - python3-pip
          - git
        state: present

    - name: Install Docker Python SDK
      pip:
        name: docker

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Build Docker image
      docker_image:
        build:
          path: "{{ docker_build_context }}"
          dockerfile: docker/Dockerfile
        name: "{{ docker_image_name }}"
        tag: "{{ docker_image_tag }}"
        source: build
        force_source: yes

    - name: Remove existing container
      docker_container:
        name: "{{ container_name }}"
        state: absent

    - name: Run Docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image_name }}:{{ docker_image_tag }}"
        state: started
        restart_policy: always
        published_ports: "{{ container_ports }}"
        env: "{{ container_env }}"
        memory: "{{ container_memory }}"
        cpu_shares: "{{ container_cpu }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost/health"]
          interval: "{{ health_check_interval }}"
          timeout: "{{ health_check_timeout }}"
          retries: "{{ health_check_retries }}"